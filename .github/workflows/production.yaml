name: Production Release

on:
  push:
    branches:
      - production

jobs:
  release:
    name: Build and Release
    runs-on: ubuntu-latest
    permissions:
      contents: write
      packages: write

    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: Setup Go
        uses: actions/setup-go@v5
        with:
          go-version: "1.24.1"

      - name: Generate semantic version
        id: version
        uses: paulhatch/semantic-version@v5.4.0
        with:
          tag_prefix: "v"
          major_pattern: "(BREAKING CHANGE:|feat!:|fix!:|refactor!:)"
          minor_pattern: "(feat:|feature:)"
          version_format: "${major}.${minor}.${patch}"
          bump_each_commit: false
          search_commit_body: true
          user_format_type: "csv"
          enable_prerelease_mode: false
          debug: false

      - name: Download rustic binaries
        run: make download-rustic

      - name: Update version in code
        run: |
          # Update system/const.go with the new version
          sed -i 's/var Version = ".*"/var Version = "${{ steps.version.outputs.version }}"/' system/const.go
          echo "Updated version to: ${{ steps.version.outputs.version }}"

      - name: Build release binaries
        env:
          CGO_ENABLED: 0
          VERSION: ${{ steps.version.outputs.version }}
        run: |
          # Build AMD64
          GOARCH=amd64 go build \
            -o dist/elytra_linux_amd64 \
            -v -trimpath \
            -ldflags="-s -w -X github.com/pyrohost/elytra/src/system.Version=$VERSION" \
            ./src/cmd/elytra

          # Build ARM64
          GOARCH=arm64 go build \
            -o dist/elytra_linux_arm64 \
            -v -trimpath \
            -ldflags="-s -w -X github.com/pyrohost/elytra/src/system.Version=$VERSION" \
            ./src/cmd/elytra

          # Make executable
          chmod 755 dist/*

      - name: Create checksums
        run: |
          cd dist
          sha256sum elytra_linux_amd64 > checksums.txt
          sha256sum elytra_linux_arm64 >> checksums.txt
          cat checksums.txt

      - name: Commit version update
        run: |
          git config user.name "github-actions[bot]"
          git config user.email "41898282+github-actions[bot]@users.noreply.github.com"
          git add system/const.go
          git commit -m "chore: bump version to ${{ steps.version.outputs.version }} [skip ci]" || exit 0
          git push origin production

      - name: Create Release
        uses: softprops/action-gh-release@v2
        with:
          tag_name: v${{ steps.version.outputs.version }}
          name: Elytra v${{ steps.version.outputs.version }}
          body: |
            ## Elytra v${{ steps.version.outputs.version }}

            This release was automatically generated using conventional commits.

            ### Downloads
            - `elytra_linux_amd64` - Linux x86_64
            - `elytra_linux_arm64` - Linux ARM64

            ### Installation
            ```bash
            # Download and install (replace with your architecture)
            wget https://github.com/pyrohost/elytra/releases/download/v${{ steps.version.outputs.version }}/elytra_linux_amd64
            chmod +x elytra_linux_amd64
            sudo mv elytra_linux_amd64 /usr/local/bin/elytra
            ```

            ### SHA256 Checksums
            ```
            $(cat dist/checksums.txt)
            ```

            **Full Changelog**: https://github.com/pyrohost/elytra/releases
          files: |
            dist/elytra_linux_amd64
            dist/elytra_linux_arm64
            dist/checksums.txt
          draft: false
          prerelease: ${{ contains(steps.version.outputs.version, 'rc') || contains(steps.version.outputs.version, 'beta') || contains(steps.version.outputs.version, 'alpha') }}
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3

      - name: Log in to GitHub Container Registry
        uses: docker/login-action@v3
        with:
          registry: ghcr.io
          username: ${{ github.actor }}
          password: ${{ secrets.GITHUB_TOKEN }}

      - name: Extract Docker metadata
        id: docker_meta
        uses: docker/metadata-action@v5
        with:
          images: ghcr.io/pyrohost/elytra
          tags: |
            type=semver,pattern={{version}},value=v${{ steps.version.outputs.version }}
            type=semver,pattern={{major}}.{{minor}},value=v${{ steps.version.outputs.version }}
            type=semver,pattern={{major}},value=v${{ steps.version.outputs.version }}
            type=raw,value=latest

      - name: Build and push Docker image
        uses: docker/build-push-action@v6
        with:
          context: .
          file: ./Dockerfile
          platforms: linux/amd64,linux/arm64
          push: true
          tags: ${{ steps.docker_meta.outputs.tags }}
          labels: ${{ steps.docker_meta.outputs.labels }}
          build-args: |
            VERSION=${{ steps.version.outputs.version }}
          cache-from: type=gha
          cache-to: type=gha,mode=max